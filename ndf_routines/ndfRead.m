function [data, metadata] = ndfRead(filePath) 
% NDFREAD - Opens a Neuroscience Data Format (NDF) file generated by
% Neuroarchiver in LWDAQ.
% 
% [DATA, METADATA] = NDFREAD(filePath)
% 
% Reads the data and metadata contained in the .ndf file specified with
% FILEPATH. This will contain the raw signals from the recording session
% which still need to be reconstructed.
%
% The documentation for this file type is contained in the links below.
% http://www.bndhep.net/Electronics/LWDAQ/Manual.html#Files
% http://www.opensourceinstruments.com/Electronics/A3018/Neuroarchiver.html#Import-Export
% 
% See also NDFREADSESSION, NDFRECONSTRUCT, NDFWRITE, NDFEXTRACT
fileID = fopen(filePath);

header_identifier = fread(fileID, 4, 'ubit8');
header_meta_data_address = fread(fileID, 1, 'ubit32', 'ieee-be');
header_data_address = fread(fileID, 1, 'ubit32', 'ieee-be');
header_meta_data_length = fread(fileID, 1, 'uint32', 'ieee-be');

% determine if file is ndf
if header_identifier ~= [32;110;100;102]
    error_message = [ 'Identifier string '' ndf'' not present.\n' , ...
                      'Input is either corrupted or not an NDF file.' ];
    error('MJStools:ndfRoutines:invalideInputs', error_message)
end

% message
formatSpec = 'Importing %s...';
fprintf(formatSpec, filePath);

% READ METADATA
%
% include a description of the metadata structure
%
% impliment a simple meta data output script

% READ DATA
%
% The data itself starts at the data address, and is divided into
% messages.Each message has a core made up of four bytes. The first byte is
% the channel number. The next two bytes are the sixteen-bit sample value,
% high byte first. The fourth byte is a timestamp or, in the case of clock
% messages, a firmware version number.
%
% http://www.opensourceinstruments.com/Electronics/A3018/Neuroarchiver.html#Import-Export


% determine file length
fseek(fileID, 0, 'eof');
filesize = ftell(fileID);
readend = (filesize - header_data_address) / 4;

% move to data address specified in the data header
fseek(fileID,header_data_address, 'bof');

% preallocate structured array based on file size
data.channel = zeros(1, readend);
data.value = zeros(1, readend);
data.timestamp = zeros(1, readend);

for i = 1:readend;
data.channel(i) = fread(fileID, 1, 'ubit8');
data.value(i) = fread(fileID, 1, 'ubit16', 'ieee-be');
data.timestamp(i) = fread(fileID, 1, 'ubit8');
end

fprintf('Complete:');


end

